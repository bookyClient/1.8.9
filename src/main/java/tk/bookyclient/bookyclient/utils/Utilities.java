package tk.bookyclient.bookyclient.utils;

import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.crash.CrashReport;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.relauncher.ReflectionHelper;
import org.lwjgl.opengl.*;

import javax.crypto.KeyGenerator;
import java.io.File;
import java.lang.reflect.Method;
import java.nio.FloatBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class Utilities {

    private static final Method setColorBuffer = ReflectionHelper.findMethod(RenderHelper.class, null, new String[]{"func_74517_a", "setColorBuffer"}, float.class, float.class, float.class, float.class);

    Utilities() {
    }

    @SafeVarargs
    public final <K, V> Map<K, V> createMap(Pair<K, V>... pairs) {
        Map<K, V> map = new HashMap<>();
        for (Pair<K, V> pair : pairs) map.put(pair.getKey(), pair.getValue());
        return map;
    }

    public ModMetadata fillMetadata(ModMetadata metadata) {
        metadata.autogenerated = false;

        metadata.modId = Constants.MOD_ID;
        metadata.name = Constants.MOD_NAME;
        metadata.version = Constants.VERSION;

        metadata.description = "This is a minecraft client.";
        metadata.authorList = Collections.singletonList(Constants.AUTHOR);

        metadata.updateJSON = "https://" + Constants.MOD_ID + ".tk/update.json";
        metadata.logoFile = "assets/" + Constants.MOD_ID + "/logo.png";
        metadata.url = "https://" + Constants.MOD_ID + ".tk/";

        return metadata;
    }

    public MessageDigest getSHA512Hasher() {
        try {
            return MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException exception) {
            throw new Error(exception);
        }
    }

    public KeyGenerator getAESGenerator() {
        try {
            return KeyGenerator.getInstance("AES");
        } catch (NoSuchAlgorithmException exception) {
            throw new Error(exception);
        }
    }

    public void saveReport(CrashReport report) {
        try {
            if (report.getFile() == null) {
                File file = new File(Constants.CRASH_REPORT_DIR, String.format("crash-%s-client.txt", Constants.DATE_FORMAT.format(new Date())));
                report.saveToFile(file);
            } else {
                report.saveToFile(report.getFile());
            }
        } catch (Throwable throwable) {
            Constants.LOGGER.error("Failed saving report", throwable);
        }
    }

    /**
     * This is not written be me. Licensed under MIT License,
     * click on the link for the original repository.
     *
     * @author https://github.com/DimensionalDevelopment/VanillaFix
     */
    public void resetState() {
        try {
            // Clear matrix stack
            GlStateManager.matrixMode(GL11.GL_MODELVIEW);
            GlStateManager.loadIdentity();
            GlStateManager.matrixMode(GL11.GL_PROJECTION);
            GlStateManager.loadIdentity();
            GlStateManager.matrixMode(GL11.GL_TEXTURE);
            GlStateManager.loadIdentity();
            GlStateManager.matrixMode(GL11.GL_COLOR);
            GlStateManager.loadIdentity();

            // Reset texture
            GlStateManager.bindTexture(0);
            GlStateManager.disableTexture2D();

            // Reset GL lighting
            GlStateManager.disableLighting();
            GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, (FloatBuffer) setColorBuffer.invoke(null, 0.2F, 0.2F, 0.2F, 1.0F));
            for (int i = 0; i < 8; ++i) {
                GlStateManager.disableLight(i);
                GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_AMBIENT, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 0.0F, 1.0F));
                GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_POSITION, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 1.0F, 0.0F));

                if (i == 0) {
                    GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_DIFFUSE, (FloatBuffer) setColorBuffer.invoke(null, 1.0F, 1.0F, 1.0F, 1.0F));
                    GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_SPECULAR, (FloatBuffer) setColorBuffer.invoke(null, 1.0F, 1.0F, 1.0F, 1.0F));
                } else {
                    GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_DIFFUSE, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 0.0F, 1.0F));
                    GL11.glLight(GL11.GL_LIGHT0 + i, GL11.GL_SPECULAR, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 0.0F, 1.0F));
                }
            }
            GlStateManager.disableColorMaterial();
            GlStateManager.colorMaterial(1032, 5634);

            // Reset depth
            GlStateManager.disableDepth();
            GlStateManager.depthFunc(513);
            GlStateManager.depthMask(true);

            // Reset blend mode
            GlStateManager.disableBlend();
            GlStateManager.blendFunc(1, 0);
            GlStateManager.tryBlendFuncSeparate(1, 0, 1, 0);
            GL14.glBlendEquation(GL14.GL_FUNC_ADD);

            // Reset fog
            GlStateManager.disableFog();
            GlStateManager.setFog(9729);
            GlStateManager.setFogDensity(1.0F);
            GlStateManager.setFogStart(0.0F);
            GlStateManager.setFogEnd(1.0F);
            GL11.glFog(GL11.GL_FOG_COLOR, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 0.0F, 0.0F));
            if (GLContext.getCapabilities().GL_NV_fog_distance) GL11.glFogi(GL11.GL_FOG_MODE, 34140);

            // Reset polygon offset
            GlStateManager.doPolygonOffset(0.0F, 0.0F);
            GlStateManager.disablePolygonOffset();

            // Reset color logic
            GlStateManager.disableColorLogic();
            GlStateManager.colorLogicOp(5379);

            // Reset texgen
            GlStateManager.disableTexGenCoord(GlStateManager.TexGen.S);
            GlStateManager.disableTexGenCoord(GlStateManager.TexGen.T);
            GlStateManager.disableTexGenCoord(GlStateManager.TexGen.R);
            GlStateManager.disableTexGenCoord(GlStateManager.TexGen.Q);
            GlStateManager.texGen(GlStateManager.TexGen.S, 9216);
            GlStateManager.texGen(GlStateManager.TexGen.T, 9216);
            GlStateManager.texGen(GlStateManager.TexGen.R, 9216);
            GlStateManager.texGen(GlStateManager.TexGen.Q, 9216);
            GlStateManager.texGen(GlStateManager.TexGen.S, 9474, (FloatBuffer) setColorBuffer.invoke(null, 1.0F, 0.0F, 0.0F, 0.0F));
            GlStateManager.texGen(GlStateManager.TexGen.T, 9474, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 1.0F, 0.0F, 0.0F));
            GlStateManager.texGen(GlStateManager.TexGen.R, 9474, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 1.0F, 0.0F));
            GlStateManager.texGen(GlStateManager.TexGen.Q, 9474, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 0.0F, 1.0F));
            GlStateManager.texGen(GlStateManager.TexGen.S, 9217, (FloatBuffer) setColorBuffer.invoke(null, 1.0F, 0.0F, 0.0F, 0.0F));
            GlStateManager.texGen(GlStateManager.TexGen.T, 9217, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 1.0F, 0.0F, 0.0F));
            GlStateManager.texGen(GlStateManager.TexGen.R, 9217, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 1.0F, 0.0F));
            GlStateManager.texGen(GlStateManager.TexGen.Q, 9217, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 0.0F, 1.0F));

            // Disable lightmap
            GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
            GlStateManager.disableTexture2D();

            GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);

            // Reset texture parameters
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST_MIPMAP_LINEAR);
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_REPEAT);
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_REPEAT);
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL12.GL_TEXTURE_MAX_LEVEL, 1000);
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL12.GL_TEXTURE_MAX_LOD, 1000);
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL12.GL_TEXTURE_MIN_LOD, -1000);
            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, 0.0F);

            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL11.GL_TEXTURE_ENV_MODE, GL11.GL_MODULATE);
            GL11.glTexEnv(GL11.GL_TEXTURE_ENV, GL11.GL_TEXTURE_ENV_COLOR, (FloatBuffer) setColorBuffer.invoke(null, 0.0F, 0.0F, 0.0F, 0.0F));
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL13.GL_COMBINE_RGB, GL11.GL_MODULATE);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL13.GL_COMBINE_ALPHA, GL11.GL_MODULATE);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL15.GL_SRC0_RGB, GL11.GL_TEXTURE);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL15.GL_SRC1_RGB, GL13.GL_PREVIOUS);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL15.GL_SRC2_RGB, GL13.GL_CONSTANT);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL15.GL_SRC0_ALPHA, GL11.GL_TEXTURE);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL15.GL_SRC1_ALPHA, GL13.GL_PREVIOUS);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL15.GL_SRC2_ALPHA, GL13.GL_CONSTANT);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL13.GL_OPERAND0_RGB, GL11.GL_SRC_COLOR);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL13.GL_OPERAND1_RGB, GL11.GL_SRC_COLOR);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL13.GL_OPERAND2_RGB, GL11.GL_SRC_ALPHA);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL13.GL_OPERAND0_ALPHA, GL11.GL_SRC_ALPHA);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL13.GL_OPERAND1_ALPHA, GL11.GL_SRC_ALPHA);
            GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, GL13.GL_OPERAND2_ALPHA, GL11.GL_SRC_ALPHA);
            GL11.glTexEnvf(GL11.GL_TEXTURE_ENV, GL13.GL_RGB_SCALE, 1.0F);
            GL11.glTexEnvf(GL11.GL_TEXTURE_ENV, GL11.GL_ALPHA_SCALE, 1.0F);

            GlStateManager.disableNormalize();
            GlStateManager.shadeModel(7425);
            GlStateManager.disableRescaleNormal();
            GlStateManager.colorMask(true, true, true, true);
            GlStateManager.clearDepth(1.0D);
            GL11.glLineWidth(1.0F);
            GL11.glNormal3f(0.0F, 0.0F, 1.0F);
            GL11.glPolygonMode(GL11.GL_FRONT, GL11.GL_FILL);
            GL11.glPolygonMode(GL11.GL_BACK, GL11.GL_FILL);

            GlStateManager.enableTexture2D();
            GlStateManager.shadeModel(7425);
            GlStateManager.clearDepth(1.0D);
            GlStateManager.enableDepth();
            GlStateManager.depthFunc(515);
            GlStateManager.enableAlpha();
            GlStateManager.alphaFunc(516, 0.1F);
            GlStateManager.cullFace(1029);
            GlStateManager.matrixMode(5889);
            GlStateManager.loadIdentity();
            GlStateManager.matrixMode(5888);
        } catch (Throwable throwable) {
            throw new Error(throwable);
        }
    }
}
