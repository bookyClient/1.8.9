package tk.bookyclient.bookyclient.utils;

import net.minecraftforge.fml.common.ModMetadata;

import javax.crypto.KeyGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class Utilities {

    private long blurStart = 0L, tick;

    Utilities() {
    }

    @SafeVarargs
    public final <K, V> Map<K, V> createMap(Pair<K, V>... pairs) {
        Map<K, V> map = new HashMap<>();
        for (Pair<K, V> pair : pairs) map.put(pair.getKey(), pair.getValue());
        return map;
    }

    public ModMetadata fillMetadata(ModMetadata metadata) {
        metadata.autogenerated = false;

        metadata.modId = Constants.MOD_ID;
        metadata.name = Constants.MOD_NAME;
        metadata.version = Constants.VERSION;

        metadata.description = "This is a minecraft client.";
        metadata.authorList = Collections.singletonList(Constants.AUTHOR);

        metadata.updateJSON = "https://" + Constants.MOD_ID + ".tk/update.json";
        metadata.logoFile = "assets/" + Constants.MOD_ID + "/logo.png";
        metadata.url = "https://" + Constants.MOD_ID + ".tk/";

        return metadata;
    }

    public MessageDigest getSHA512Hasher() {
        try {
            return MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException exception) {
            throw new Error(exception);
        }
    }

    public KeyGenerator getAESGenerator() {
        try {
            return KeyGenerator.getInstance("AES");
        } catch (NoSuchAlgorithmException exception) {
            throw new Error(exception);
        }
    }

    public int getGUIBackgroundColor() {
        int color = 75000000;
        float progress = getBlurProgress();

        int a = (int) ((color >>> 24) * progress);
        int r = (int) (((color >> 16) & 0xFF) * progress);
        int b = (int) (((color >> 8) & 0xFF) * progress);
        int g = (int) ((color & 0xFF) * progress);

        return a << 24 | r << 16 | b << 8 | g;
    }

    public float getBlurProgress() {
        return Math.min((System.currentTimeMillis() - blurStart) / (float) 100, 1);
    }

    public void setBlurStart() {
        blurStart = System.currentTimeMillis();
    }

    public long getTick() {
        return tick;
    }

    public void tick() {
        tick = System.nanoTime();
    }
}
